import datetime as dt
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from sqlalchemy.orm import sessionmaker

from keyboards.keyboards import (
    menu_button,
    inline_menu,
)
from .states import DefectiveProduct, Spendings, WorkshiftState
from .anonymous import workers_id
from models.models import User, WorkShift, Defective
from engine import engine


router = Router()
router.message.filter(F.chat.id.in_(workers_id))
router.callback_query.filter(F.chat.id.in_(workers_id))

Session = sessionmaker(bind=engine)


def workers():
    with Session() as session:
        users = session.query(User.telegram_id).all()
        global workers_id
        workers_id = set(users)


def check_registration(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ë–î"""
    with Session() as session:
        user = session.query(User)\
               .filter(User.telegram_id == chat_id).first()
        return True if user else False


@router.message(CommandStart())
async def cmd_worker_start(message: Message, state: FSMContext):
    """–°—Ç–∞—Ä—Ç"""

    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}',
        reply_markup=menu_button()
    )
    await state.clear()


@router.message(F.text == '–ú–µ–Ω—é')
async def worker_menu(message: Message):
    await message.answer(
        '–ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ üé≤',
        reply_markup=inline_menu()
    )


@router.callback_query(F.data.startswith('worker_menu'))
async def menu(callback: CallbackQuery):
    """–ò–Ω–ª–∞–π–Ω –º–µ–Ω—é"""
    page = int(callback.data.split('=')[1])

    await callback.message.edit_text(
        text='–ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ üé≤',
        reply_markup=inline_menu(page)
    )


@router.callback_query(F.data.startswith('workshift'))
async def open(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ/–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã"""
    await callback.message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ'
    )
    direction = callback.data.split('_')[1]
    await state.update_data(status=direction)
    await state.set_state(WorkshiftState.shift)


@router.message(F.photo, WorkshiftState.shift)
async def open_photo(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å–º–µ–Ω—ã"""
    data = await state.get_data()
    status = True if data['status'] == 'open' else False
    reply_status = '–æ—Ç–∫—Ä—ã—Ç–∞' if status else '–∑–∞–∫—Ä—ã—Ç–∞'
    photo = message.photo[-1].file_id
    with Session() as sess:
        user = sess.query(User).filter(User.telegram_id == message.chat.id)\
            .first()
        sess.add(
            WorkShift(
                user_id=user.id,
                photo=photo,
                status='open' if status else 'close',
                date=dt.datetime.now(),
                # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ shop_id
                shop_id='123'
            )
        )
        sess.commit()
    await message.reply(
        f'–°–º–µ–Ω–∞ {reply_status} \n'
        f'{message.date.time()} \n'
        f'{message.date.date()}'
    )
    await state.clear()


@router.callback_query(F.data == 'defective')
async def cmd_defective(callback: CallbackQuery, state: FSMContext):
    """–ë—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""

    await callback.message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ —Å —Ç–æ–≤–∞—Ä–æ–º'
    )
    await state.set_state(DefectiveProduct.video)


@router.message(DefectiveProduct.video, F.video)
async def video(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å –±—Ä–∞–∫–æ–º"""

    await state.update_data(video=message.video.file_id)
    await message.answer(
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
    )
    await state.set_state(DefectiveProduct.title)


@router.message(DefectiveProduct.title)
async def title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

    await state.update_data(name=message.text)
    await message.answer(
        '–ê—Ä—Ç–∏–∫—É–ª'
    )
    await state.set_state(DefectiveProduct.product_id)


@router.message(
    DefectiveProduct.product_id,
    F.text.func(lambda text: int(text) > 0)
)
async def product_id(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""

    await state.update_data(article=int(message.text))
    data = await state.get_data()
    with Session() as sess:
        user = sess.query(User).filter(User.telegram_id == message.chat.id)\
            .first()
        defective_item = Defective(
            name=data['name'],
            article_number=data['article'],
            user=user,
            shop_id=user.shop_id,
            video=data['video']
        )
        sess.add(defective_item)
        sess.commit()
    await message.answer(
        '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç'
    )
    await state.clear()


@router.message(Command('spendings'))
async def spendings(message: Message, state: FSMContext):
    """–¢—Ä–∞—Ç—ã"""

    await message.answer(
        '–ù–∞ —á—Ç–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ?'
    )
    await state.set_state(Spendings.purchaises)


@router.message(Spendings.purchaises, F.text)
async def purchaises(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Ç"""

    await state.update_data(description=message.text)
    await message.answer(
        '–°–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ —Ä—É–±–ª–µ–π'
    )
    await state.set_state(Spendings.money_spent)


@router.message(
    Spendings.money_spent,
    F.text.func(lambda text: int(text) > 0)
)
async def money_spent(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –¥–µ–Ω–µ–≥"""

    await state.update_data(money=int(message.text))
    await message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞'
    )
    await state.set_state(Spendings.cash_receipt)


@router.message(Spendings.cash_receipt, F.photo)
async def cash_receipt(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ–∫–∞"""

    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    data = await state.get_data()
    with Session() as sess:
        user = sess.query(User).filter(User.telegram_id == message.chat.id)\
            .first()
        spent = Spendings(
            description=data['description'],
            photo=data['photo'],
            money_spent=data['money'],
            user=user,
            shop=user.shop
        )
        sess.add(spent)
        sess.commit()
    await message.answer(
        '–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç'
    )
    await state.clear()


@router.callback_query(F.data == 'order')
async def order(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞"""
    pass
